{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","hastError","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d2bc06b8.chunk.js","sourcesContent":["// die Component für unsere einzelnen Roboter-Cards\r\nimport React from 'react';\r\n\r\n// Angelegt als Funktion, man könnte aber auch eine class machen\r\nconst Card = ({name, email, id}) => { /*Kombination der von robots.js, index.js und Card.js, {} weil wir hier Destructuring betreiben*/\r\n        return (\r\n            <div className='tc bg-light-green dib br3 pad3 ma2 grow bw2 shadow-5'> {/*className statt class, weil class hier bereits reserviert ist, einfügen der css-Properties aus tachyons*/}\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`} /> {/* Template Strings (Curly Bracket und umgekehrte Anführungszeichen), um die jeweilgen inhalten aus den Objekten im robots.js-Array zu nutzen */}\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\n// immer exportieren, was in index importiert wird (default für einen return)\r\nexport default Card; \r\n","import React from 'react';\r\nimport Card from './Card'; /* jetzt wird hier Card verwendet und muss importiert werden */\r\n\r\nconst CardList = ({robots}) => { /* Muss robots als prop akzeptieren, wenn man es unten verwendet */\r\n    return (\r\n        <div>\r\n                {/* das war ursprüngliche Variante, jetzt Lösung mit Loop unten */}\r\n                {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/> {/*alle Components von oben müssen hier untern verwendet werden*/}\r\n                {/* <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/> */} {/*wir fügen zu jeder Card die Roboter hinzu*/}\r\n                {/* <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> */}\r\n        \r\n        {\r\n        // Loop durch jedes Item aus dem robots.js Array\r\n        // Loops in React benötigen einen key, um zu funktionieren, in unserem Fall nehmen wir i als Index (in curly brackets, weil es Javascript ist) \r\n        robots.map((user, i) => {\r\n            return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n            );\r\n        })\r\n        } \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// Parameter der Funktion aus App.js\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange} /* event, listening to anytime the input changes, gibt das event in der Console wieder */\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children} {/* wir definieren, was mit den children von Scroll passieren soll */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hastError: true})\r\n    }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops, that is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots.js'; brauchen wir nicht mehr /* weitere Component für den Inhalt der Cards importieren, {} weil Component mehrere Bestandteile hat*/\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n       onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    // fügt die Roboter aus robots.js in den Array oben ein\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        if (isPending) { /* als Fallback, wenn es zu lange lädt, bedeutet, wenn länge der Robots gleich 0, also kein Roboter geladen */\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <Searchbox searchChange={onSearchChange}/> {/* function wird mit Searchbox verknüpft, \"this\" weil function ein object ist */}\r\n                <Scroll> {/* wir wollen, dass die CardList scrollbar ist, sodass die Searchbar sticky ist */}\r\n                    {/* wenn CardList nicht geladen werden, dann kommt die Fehlermeldung */}\r\n                    <ErrorBoundry> \r\n                        <CardList robots={filteredRobots}/> {/* jetzt wird robots nicht von ganz oben aufgerufen, sondern auch aus state, filteredRobots kann nun mit den robots.js kommunizieren */}\r\n                    </ErrorBoundry>\r\n                </Scroll>          \r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}\r\n\r\n// actions are being triggert","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch =  {\r\n    searchField: ''\r\n}\r\n\r\n// action > run function (no middleware)\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n         return Object.assign({}, state, {searchField:action.payload})\r\n        default: \r\n         return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n// /go through the middleware\r\n// /first just dispatch Pending to the reducer\r\n// /let you know when I'm done with the promise (and if there are any robots\r\n// /return: dispatch success, go through reducer,\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false}) \r\n        default: \r\n            return state;\r\n    }\r\n}","// Basis ist immer index.js\n// react und index selbst importieren\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/* import Card from './Card'; */ /* Component importieren, das nur einen return hat (in diesem Fall ein div), Modul unten einfügen, Modul-Datei erstellen (Card.js in diesem Fall) (wurde auskommentiert, weil in CardLIst uebertragen) */\nimport App from './containers/App' /* soll jetzt der Vater aller Components sein */\n// import CardList from './CardList'; auskommentiert, weil wir jetzt die Vater-COmponent App haben\nimport * as serviceWorker from './serviceWorker'; /* hat den Hintergrund, dass native Apps im Web genutzt werden können */\nimport 'tachyons'; /* in diesem Fall installiertes css Toolkit, mit dem man einfache css-Abkürzungen benutzen kann*/\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport {searchRobots, requestRobots} from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger= createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\n// actions go through middleware\n// if there is a search term change:\n/*  they go straight to reducer (no middleware)\n/run there the function and update the store\n/then make changes to our view */\n\n// if there is a request: \n/* notice that its a function\n/go through the middleware\n/first just dispatch Pending to the reducer\n/let you know when I'm done with the promise (and if there are any robots\n/return: dispatch success, go through reducer, update store, make changes */\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}